using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SoulsFormats;

namespace EldenRingSurvivalMode
{
    internal static class Params
    {
        class CSVRow
        {
            public int ID { get; }
            public string Name { get; }
            public List<string> Values { get; }

            public CSVRow(string csvRow, char separator = ';')
            {
                csvRow = csvRow.TrimEnd(separator);
                string[] values = csvRow.Split(separator);
                ID = int.Parse(values[0]);
                Name = values[1];
                Values = new List<string>();
                for (int i = 2; i < values.Length; i++)
                    Values.Add(values[i]);
            }

            public void ApplyToRow(PARAM.Row row)
            {
                row.ID = ID;
                row.Name = Name;
                List<PARAM.Cell> nonPadCells = row.Cells.Where(cell => !cell.Def.InternalName.StartsWith("pad")).ToList();
                if (nonPadCells.Count != Values.Count)
                {
                    Console.WriteLine("Non-padding cells:");
                    foreach (var cell in nonPadCells)
                    {
                        Console.WriteLine($"    {cell.Def.InternalName}");
                    }
                    foreach (var value in Values)
                    {
                        Console.WriteLine($"    Value: {value}");
                    }
                    throw new Exception($"Number of CSV cells ({Values.Count}) does not match number of non-padding PARAM cells ({nonPadCells.Count})");
                }
                    
                for (int i = 0; i < Values.Count; i++)
                    nonPadCells[i].Value = Values[i];  // `SoulsFormats` will convert string to appropriate type automatically
            }

            public static void ApplyAllRows(IEnumerable<CSVRow> rows, PARAM param)
            {
                int csvRowCount = rows.Count();
                int currentParamRowsCount = param.Rows.Count;
                if (currentParamRowsCount < csvRowCount)
                {
                    // Add default PARAM rows to catch up.
                    for (int i = 0; i < csvRowCount - currentParamRowsCount; i++)
                    {
                        PARAM.Row newRow = new PARAM.Row(-1, "", param.AppliedParamdef);
                        param.Rows.Add(newRow);
                    }
                }
                else if (csvRowCount < param.Rows.Count)
                {
                    // Delete PARAM rows.
                    param.Rows = param.Rows.GetRange(0, csvRowCount);
                }

                int rowIndex = 0;
                foreach (CSVRow row in rows)
                {
                    PARAM.Row paramRow = param.Rows[rowIndex++];
                    row.ApplyToRow(paramRow);
                }
            }
        }

        const string CSV_PATH = @"C:\Dark Souls\Tools\Params\Yapped Rune Bear 2.1.4\Projects\ExampleMod\CSV\ER\";

        /// <summary>
        /// Convert Yapped CSV files (generated by my Python code) into
        /// `regulation.bin` files for play.
        /// 
        /// This function only serves to remove Yapped from the equation
        /// for now, rather than functioning as an actual new installer
        /// (since Python is still required). 
        /// </summary>
        public static void CSVToRegulation()
        {
            if (!File.Exists("regulation.bin"))
                throw new Exception($"Could not find (vanilla) `regulation.bin` next to executable.");

            BND4 parambnd = SFUtil.DecryptERRegulation("regulation.bin");

            foreach (var file in parambnd.Files)
            {
                Console.WriteLine(file.Name);
            }

            List<PARAMDEF> paramdefs = LoadParamdefs("Defs");

            BinderFile equipMtrlSetFile = parambnd.Files.Where(x => x.Name == @"N:\GR\data\Param\param\GameParam\EquipMtrlSetParam.param").First();
            PARAM equipMtrlSet = PARAM.Read(equipMtrlSetFile.Bytes);
            equipMtrlSet.ApplyParamdefCarefully(paramdefs);
            List<CSVRow> equipMtrlSetCSV = LoadParamCSV(Path.Combine(CSV_PATH, "EquipMtrlSetParam.csv"));

            CSVRow.ApplyAllRows(equipMtrlSetCSV, equipMtrlSet);

            PARAM.Row limgraveCure = equipMtrlSet.Rows.Where(x => x.ID == 325210).First();
            Console.WriteLine($"{limgraveCure.Name}: {limgraveCure.Cells[0].Value}");
        }

        /// <summary>
        /// Load ParamDefs from Paramdex XMLs.
        /// </summary>
        /// <returns></returns>
        static List<PARAMDEF> LoadParamdefs(string defsDirectory)
        {
            List<PARAMDEF> defs = new List<PARAMDEF>();
            foreach (string file in Directory.GetFiles(defsDirectory))
            {
                PARAMDEF paramdef = PARAMDEF.XmlDeserialize(file);
                defs.Add(paramdef);
            }
            return defs;
        }

        /// <summary>
        /// Read a Yapped CSV into a list of PARAM rows (which are each a list of string values).
        /// 
        /// Each row starts with its ID, then Name, then its non-padding values.
        /// </summary>
        /// <param name="csvPath"></param>
        /// <returns></returns>
        static List<CSVRow> LoadParamCSV(string csvPath)
        {
            List<CSVRow> rows = new List<CSVRow>();
            using (var reader = new StreamReader(csvPath))
            {
                string[] header = reader.ReadLine().Split(';');
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    rows.Add(new CSVRow(line));
                }
            }
            return rows;
        }
    }
}
