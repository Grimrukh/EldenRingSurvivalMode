<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyHook</name>
    </assembly>
    <members>
        <member name="T:PropertyHook.Kernel32">
            <summary>
            Provides wrappers for process manipulation via kernel32.dll.
            </summary>
        </member>
        <member name="T:PropertyHook.PHEventArgs">
            <summary>
            Args passed to the hook and unhook events of a PHook.
            </summary>
        </member>
        <member name="P:PropertyHook.PHEventArgs.Hook">
            <summary>
            The PHook that hooked or unhooked.
            </summary>
        </member>
        <member name="M:PropertyHook.PHEventArgs.#ctor(PropertyHook.PHook)">
            <summary>
            Create a new PHEventArgs with the given hook.
            </summary>
        </member>
        <member name="T:PropertyHook.PHPointer">
            <summary>
            A dynamic pointer starting from an AOB, fixed address, or other pointer. Provides functions for reading and writing memory.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointer.Hook">
            <summary>
            The parent PHook whose handle is used for remote operations.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointer.Offsets">
            <summary>
            After finding the base address, for each offset in this array the pointer will advance by the offset, read another address, and follow it.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.#ctor(PropertyHook.PHook,System.Int32[])">
            <summary>
            Creates a new PHPointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.Resolve">
            <summary>
            Evaluates the base address and follows each offset to find the final address.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ResolveSpecific">
            <summary>
            Evaluates the pointer's base address.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadBytes(System.Int32,System.UInt32)">
            <summary>
            Read length number of bytes from the given offset.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteBytes(System.Int32,System.Byte[])">
            <summary>
            Write length number of bytes at the given offset.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadIntPtr(System.Int32)">
            <summary>
            Read an address from the given offset.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadFlag32(System.Int32,System.UInt32)">
            <summary>
            Read a 4-byte bitfield and return whether the bit specified by the given mask is set.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteFlag32(System.Int32,System.UInt32,System.Boolean)">
            <summary>
            Set the state of a bit specified by the given mask in a 4-byte bitfield.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadSByte(System.Int32)">
            <summary>
            Read a 1-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteSByte(System.Int32,System.SByte)">
            <summary>
            Write a 1-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadByte(System.Int32)">
            <summary>
            Read a 1-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteByte(System.Int32,System.Byte)">
            <summary>
            Write a 1-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadBoolean(System.Int32)">
            <summary>
            Read a 1-byte boolean value.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteBoolean(System.Int32,System.Boolean)">
            <summary>
            Write a 1-byte boolean value.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadInt16(System.Int32)">
            <summary>
            Read a 2-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteInt16(System.Int32,System.Int16)">
            <summary>
            Write a 2-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadUInt16(System.Int32)">
            <summary>
            Read a 2-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteUInt16(System.Int32,System.UInt16)">
            <summary>
            Write a 2-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadInt32(System.Int32)">
            <summary>
            Read a 4-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Write a 4-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadUInt32(System.Int32)">
            <summary>
            Read a 4-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteUInt32(System.Int32,System.UInt32)">
            <summary>
            Write a 4-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadInt64(System.Int32)">
            <summary>
            Read an 8-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Write an 8-byte signed integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadUInt64(System.Int32)">
            <summary>
            Read an 8-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteUInt64(System.Int32,System.UInt64)">
            <summary>
            Write an 8-byte unsigned integer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadSingle(System.Int32)">
            <summary>
            Read a 4-byte floating point number.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteSingle(System.Int32,System.Single)">
            <summary>
            Write a 4-byte floating point number.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadDouble(System.Int32)">
            <summary>
            Read an 8-byte floating point number.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteDouble(System.Int32,System.Double)">
            <summary>
            Write an 8-byte floating point number.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.ReadString(System.Int32,System.Text.Encoding,System.UInt32,System.Boolean)">
            <summary>
            Reads and decodes a fixed amount of bytes as a string. If trim is set, terminates after the first null character.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointer.WriteString(System.Int32,System.Text.Encoding,System.UInt32,System.String)">
            <summary>
            Encodes and writes a string as a fixed amount of bytes. If the string is too long to fit, it is truncated before encoding.
            </summary>
        </member>
        <member name="T:PropertyHook.PHook">
            <summary>
            An interface to another application's memory that automatically handles hooking, unhooking, and pointer management.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.Hooked">
            <summary>
            Whether the hook is currently attached to a process.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.Process">
            <summary>
            The currently attached process, or null if none.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.Is64Bit">
            <summary>
            Whether the attached process is 32-bit or 64-bit.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.Handle">
            <summary>
            The handle to the attached process, or zero if none.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.RefreshInterval">
            <summary>
            How often the automatic hooking thread should check for new processes, in milliseconds.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.MinLifetime">
            <summary>
            The minimum time a process must have been running before hooking is attempted, in milliseconds.
            </summary>
        </member>
        <member name="P:PropertyHook.PHook.AOBScanSucceeded">
            <summary>
            Indicates whether all AOB scans found a match during the last scan. Always false when unhooked.
            </summary>
        </member>
        <member name="E:PropertyHook.PHook.OnHooked">
            <summary>
            Fires immediately after attaching to a new process.
            </summary>
        </member>
        <member name="E:PropertyHook.PHook.OnUnhooked">
            <summary>
            Fires immediately after detaching from a process.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.GetPointers">
            <summary>
            Starts a thread that automatically checks for new processes to hook.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.#ctor(System.Int32,System.Int32,System.Func{System.Diagnostics.Process,System.Boolean})">
            <summary>
            Creates a new PHook.
            </summary>
            <param name="refreshInterval">How often the automatic hooking thread should check for new processes, in milliseconds.</param>
            <param name="minLifetime">The minimum time a process must have been running before hooking is attempted, in milliseconds.</param>
            <param name="processSelector">A function that determines if a process should be attempted to be hooked.</param>
        </member>
        <member name="M:PropertyHook.PHook.Start">
            <summary>
            Starts a thread that automatically checks for new processes to hook.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.Stop">
            <summary>
            Stops the automatic hooking thread.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.Refresh">
            <summary>
            Checks for new processes to attach to; either call this manually, or call Start to do it automatically.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.RegisterRelativeAOB(System.Nullable{System.Byte}[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates and registers a new relative AOB pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.RegisterRelativeAOB(System.String,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Create and register a new relative AOB pointer with a CE-style AOB string.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.RegisterAbsoluteAOB(System.Nullable{System.Byte}[],System.Int32[])">
            <summary>
            Creates and registers a new absolute AOB pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.RegisterAbsoluteAOB(System.String,System.Int32[])">
            <summary>
            Creates and registers a new absolute AOB pointer with a CE-style AOB string.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.CreateBasePointer(System.IntPtr,System.Int32[])">
            <summary>
            Creates a new base address pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.CreateChildPointer(PropertyHook.PHPointer,System.Int32[])">
            <summary>
            Creates a new child pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.UnregisterAOBPointer(PropertyHook.PHPointerAOB)">
            <summary>
            Unregisters an AOB pointer. Returns null.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.RescanAOB">
            <summary>
            Manually rescans all AOB pointers.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.Allocate(System.UInt32,System.UInt32)">
            <summary>
            Allocates a memory region with the given size and permissions.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.GetPrefferedIntPtr(System.Int32,System.Nullable{System.IntPtr},System.UInt32)">
            <summary>
            Get's a pointer allocated in near the process image.  
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.Free(System.IntPtr)">
            <summary>
            Frees a memory region at the given address. Returns true if successful.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.Execute(System.IntPtr,System.UInt32)">
            <summary>
            Starts a thread at the given address and waits for it to complete. Returns execution result.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.Execute(System.Byte[],System.UInt32)">
            <summary>
            Allocates memory for the given bytes, starts a thread at their address, waits for it to complete, and frees the memory. Returns execution result.
            </summary>
        </member>
        <member name="M:PropertyHook.PHook.InjectDLL(System.String)">
            <summary>
            Injects DLL specified in path.
            </summary>
        </member>
        <member name="T:PropertyHook.PHPointerAOB">
            <summary>
            A dynamic pointer starting from an array of bytes scanned for in the target process.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointerAOB.AOB">
            <summary>
            The AOB to scan for.
            </summary>
        </member>
        <member name="F:PropertyHook.PHPointerAOB.AOBResult">
            <summary>
            The result of the AOB scan.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerAOB.#ctor(PropertyHook.PHook,System.Nullable{System.Byte}[],System.Int32[])">
            <summary>
            Creates a new AOB pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerAOB.ResolveSpecific">
            <summary>
            Returns the result of the AOB scan.
            </summary>
        </member>
        <member name="T:PropertyHook.PHPointerAOBAbsolute">
            <summary>
            A dynamic pointer starting from the base address of an array of bytes scanned for in the target process.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerAOBAbsolute.#ctor(PropertyHook.PHook,System.Nullable{System.Byte}[],System.Int32[])">
            <summary>
            Creates a new absolute AOB pointer.
            </summary>
        </member>
        <member name="T:PropertyHook.PHPointerAOBRelative">
            <summary>
            A dynamic pointer starting from a relative address found after an array of bytes scanned for in the target process.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointerAOBRelative.AddressOffset">
            <summary>
            The offset of the relative address from the beginning of the AOB.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointerAOBRelative.InstructionSize">
            <summary>
            The total size from the beginning of the AOB to the end of the instruction containing the relative address.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerAOBRelative.#ctor(PropertyHook.PHook,System.Nullable{System.Byte}[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates a new relative AOB pointer.
            </summary>
        </member>
        <member name="T:PropertyHook.PHPointerBase">
            <summary>
            A dynamic pointer starting from a fixed address.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointerBase.BaseAddress">
            <summary>
            The fixed address to start from.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerBase.#ctor(PropertyHook.PHook,System.IntPtr,System.Int32[])">
            <summary>
            Creates a new base pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerBase.ResolveSpecific">
            <summary>
            Returns the base address.
            </summary>
        </member>
        <member name="T:PropertyHook.PHPointerChild">
            <summary>
            A dynamic pointer starting from the result of another pointer's resolution.
            </summary>
        </member>
        <member name="P:PropertyHook.PHPointerChild.BasePointer">
            <summary>
            The parent pointer to start from.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerChild.#ctor(PropertyHook.PHook,PropertyHook.PHPointer,System.Int32[])">
            <summary>
            Creates a new child pointer.
            </summary>
        </member>
        <member name="M:PropertyHook.PHPointerChild.ResolveSpecific">
            <summary>
            Returns the final address of the parent pointer.
            </summary>
        </member>
    </members>
</doc>
